{"version":3,"sources":["images/bg2.png","App.styles.ts","API.ts","Components/QuestionCard.tsx","utils.ts","Components/StartForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Difficulty","GlobalStyle","createGlobalStyle","BGImg","Wrapper","styled","div","AnswersWrapper","ButtonWrapper","correct","userClicked","SelectContainer","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","console","log","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","result","results","array","incorrect_answers","correct_answer","sort","Math","random","diff","dif","StartForm","condition","startTrivia","formik","useFormik","initialValues","onSubmit","values","handleSubmit","name","value","onChange","handleChange","onBlur","handleBlur","selected","Object","d","type","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","newQuestions","useEffect","length","undefined","e","currentTarget","innerText","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b0a00152.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg2.ec5b4261.png\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImg from \"./images/bg2.png\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html{\n        height: 100%;       \n    }\n    body{\n        background-image:url(${BGImg});\n        background-size: cover;\n        margin:0;\n        padding: 0 20px;\n        display: flex;\n        justify-content:center;\n    }\n    *{\n        box-sizing:border-box;\n        font-family: \"Comic Sans MS\", \"Comic Sans\";\n    }\n`;\n\nexport const Wrapper = styled.div`\n  margin-top: 10rem;\n  display: flex;\n  padding: 5rem;\n  min-width: 20rem;\n  max-width: 60rem;\n  flex-direction: column;\n  align-items: center;\n  border: 1px black;\n  border-radius: 3px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  background: white;\n  text-align: center;\n\n  outline-style: none;\n\n  > p {\n    color: \"white\";\n  }\n\n  h1 {\n    background-image: linear-gradient(\n      to right,\n      rgba(252, 3, 40),\n      rgba(255, 105, 180)\n    );\n    text-transform: uppercase;\n    -webkit-background-clip: text;\n    color: transparent;\n  }\n\n  .score {\n    color: \"white\";\n    font-size: \"2rem\";\n    margin: 0;\n  }\n\n  .start,\n  .next {\n    cursor: pointer;\n\n    padding: 5px 40px;\n\n    box-shadow: 0px 5px 10px rgba(255, 105, 180, 0.25);\n    color: white;\n    transition: all 0.2s;\n    background-color: hotpink;\n\n    &:hover {\n      transform: scale(1.1);\n    }\n  }\n  .start {\n    padding: 10px 80px;\n    border-radius: 30px;\n    font-size: 30px;\n    border: none;\n    margin-bottom: 3rem;\n  }\n  .next {\n    margin-top: 5rem;\n    border: none;\n    border-radius: 20px;\n  }\n`;\n\nexport const AnswersWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\ntype ButtonProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\nexport const ButtonWrapper = styled.div<ButtonProps>`\n  button {\n    margin-top: 20px;\n    padding: 5px 30px;\n    border: none;\n    border-radius: 10px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    color: white;\n    transition: all 0.3s;\n    margin-right: 1rem;\n    font-size: 15px;\n    cursor: pointer;\n\n    background-color: hotpink;\n\n    &:hover {\n      background-color: rgba(255, 59, 157);\n      transform: scale(1.1) rotate(5deg);\n\n      /* background-image: linear-gradient(to right, rgba(252, 3, 40) , rgba(255, 105, 180));    */\n    }\n\n    &:disabled {\n      background-color: ${({ correct, userClicked }) =>\n        correct\n          ? \"lightgreen\"\n          : !correct && userClicked\n          ? \"#ff5b4f\"\n          : \"lightgray\"};\n      color: ${({ correct, userClicked }) =>\n        correct ? \"black\" : !correct && userClicked ? \"white\" : \"grey\"};\n    }\n  }\n`;\nexport const SelectContainer = styled.div`\n  margin: 30px;\n`;\n","import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n  category: string;\n  type: string;\n  difficulty: string;\n  question: string;\n  correct_answer: string;\n  incorrect_answers: string[];\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=32`;\n  const data = await (await fetch(endpoint)).json();\n  const result = data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n\n  const diff = data.results.map((question: Question) => ({\n    ...question,\n    dif: question.difficulty,\n  }));\n\n  console.log(diff);\n  return result;\n};\n","import React from \"react\";\nimport { AnswerObject } from \"../App\";\n\nimport { AnswersWrapper, ButtonWrapper } from \"../App.styles\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n}) => {\n  console.log(answers);\n  return (\n    <div>\n      <p className=\"number\">\n        Question: {questionNumber} / {totalQuestions}\n      </p>\n      <p dangerouslySetInnerHTML={{ __html: question }}></p>\n      <AnswersWrapper>\n        {answers.map((answer) => (\n          <ButtonWrapper\n            key={answer}\n            correct={userAnswer?.correctAnswer === answer}\n            userClicked={userAnswer?.answer === answer}\n          >\n            <button\n              className=\"answer\"\n              disabled={!!userAnswer}\n              onClick={callback}\n            >\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\n            </button>\n          </ButtonWrapper>\n        ))}\n      </AnswersWrapper>\n    </div>\n  );\n};\n\nexport default QuestionCard;\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import React from 'react'\r\nimport { Difficulty } from '../API'\r\n\r\nimport { useFormik } from 'formik';\r\nimport { SelectContainer } from '../App.styles'\r\n\r\ntype Props = {\r\n    condition: boolean\r\n    startTrivia: (difficulty: Difficulty)=>void\r\n}\r\n\r\nexport const StartForm: React.FC<Props> = ({condition, startTrivia}) =>{\r\n    const formik = useFormik({\r\n        initialValues: {\r\n          difficulty: '',\r\n        },\r\n        onSubmit: values => {\r\n          startTrivia(values.difficulty as Difficulty)\r\n        },\r\n      });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <SelectContainer>\r\n            {condition ? (\r\n              <select \r\n                name=\"difficulty\"\r\n                value={formik.values.difficulty}\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                className=\"custom-select\">\r\n                  <option value=\"\" selected>All difficulties</option>\r\n                  {Object.values(Difficulty).map(d => <option value={d}>{d}</option>)}\r\n              </select>): null}\r\n            </SelectContainer>\r\n            \r\n            {condition ? (\r\n              <button type=\"submit\" className=\"start\">\r\n                start\r\n              </button>\r\n             ) : null } \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default StartForm\r\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport QuestionCard from \"./Components/QuestionCard\";\nimport StartForm from \"./Components/StartForm\";\nimport { fetchQuizQuestions } from \"./API\";\nimport { QuestionState, Difficulty } from \"./API\";\n\nimport { GlobalStyle, Wrapper, SelectContainer } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async (difficulty: Difficulty) => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      difficulty as Difficulty\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    const correctAnswer = questions[number].correct_answer;\n    const correct = correctAnswer === e.currentTarget.innerText;\n\n    if (correct) setScore((prev: any) => prev + 1);\n\n    const answerObject: AnswerObject = {\n      question: questions[number].question,\n      answer: e.currentTarget.innerText,\n      correct: correct,\n      correctAnswer: correctAnswer,\n    };\n    setUserAnswers((prev: any) => [...prev, answerObject]);\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  useEffect(() => {\n    number === TOTAL_QUESTIONS && setGameOver(true);\n  }, [number]);\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <div>\n          <h1> Cartoon quiz</h1>\n          <StartForm\n            condition={gameOver || userAnswers.length === TOTAL_QUESTIONS}\n            startTrivia={startTrivia}\n          />\n\n          {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\n          {loading ? <p>Loading questions...</p> : null}\n          {!loading && !gameOver && number !== TOTAL_QUESTIONS && (\n            <QuestionCard\n              questionNumber={number + 1}\n              totalQuestions={TOTAL_QUESTIONS}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              userAnswer={userAnswers ? userAnswers[number] : undefined}\n              callback={checkAnswer}\n            />\n          )}\n          {!gameOver &&\n          !loading &&\n          userAnswers.length === number + 1 &&\n          number !== TOTAL_QUESTIONS - 1 ? (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next &#8658;\n            </button>\n          ) : null}\n        </div>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}